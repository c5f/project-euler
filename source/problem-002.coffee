###
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

- - -

Dear reader,

Today is August 14, 2014. The memory footprint for loading the Fibonacci 
values less than four million into memory is not the problem I wanted to deal 
with solving. Instead, I want a fast solution.
###

MAX_VAL = 4000000

###
This function sums elements of an array using the Array.reduce prototype method.
###
arraySum = (list) ->
    list.reduce (prev, curr) -> prev + curr

###
This function appends the currentValue to the numbers array and updates the 
currentValue to the sum of the last two members of the numbers array.
###
keepAdding = (numbers, currentValue) ->
    numbers.push currentValue
    currentValue = arraySum numbers.slice(-2)

# Seed our array.
numbers = [1, 2]
currentValue = 3

# Build our Fibonacci list.
currentValue = keepAdding(numbers, currentValue) while currentValue < 4000000

# Build our even values list.
evenNumbers = (number for number in numbers when number % 2 is 0)

# Find the sum.
sum = arraySum(evenNumbers)

console.log "The sum of the even-valued Fibonacci numbers less than four 
    million is: #{sum}"
